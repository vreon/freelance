[gd_scene load_steps=9 format=2]

[ext_resource path="res://levels/BossTest.gd" type="Script" id=1]
[ext_resource path="res://backgrounds/leo/stars.png" type="Texture" id=2]
[ext_resource path="res://utilities/Door.tscn" type="PackedScene" id=3]
[ext_resource path="res://Lance.tscn" type="PackedScene" id=4]
[ext_resource path="res://sprites/bubble.png" type="Texture" id=5]
[ext_resource path="res://ui/ui_doodle.png" type="Texture" id=6]

[sub_resource type="Shader" id=1]

code = "shader_type canvas_item;
render_mode unshaded;

void fragment() {
	// vec2 uv = vec2(UV.x, (sin(TIME * 0.01 + UV.x * 100.) + UV.y) + TIME * 0.1);
	// COLOR = texture(TEXTURE, uv);
	
	int iterations = 13;
	float formuparam = 0.53;

	int volsteps = 20;
	float stepsize = 0.1;
	
	float zoom = 0.800;
	float tile = 0.850;
	float speed = 0.025;
	
	float brightness = 0.0015;
	float darkmatter = 0.300;
	float distfading = 0.730;
	//float distfading = 1.;
	float saturation = 0.8;

	vec2 iResolution = vec2(400, 224);
	vec2 fragCoord = FRAGCOORD.xy;
	float iTime = TIME;
	vec2 iMouse = vec2(0., 0.);

	//get coords and direction
	//vec2 uv=uv.xy/iResolution.xy-.5;
	vec2 uv=UV;
	uv.y*=iResolution.y/iResolution.x;
	vec3 dir=vec3(uv*zoom,1.);
	float time=iTime*speed+.25;

	//mouse rotation
	float a1=.5+iMouse.x/iResolution.x*2.;
	float a2=.8+iMouse.y/iResolution.y*2.;
	mat2 rot1=mat2(vec2(cos(a1),sin(a1)),vec2(-sin(a1),cos(a1)));
	mat2 rot2=mat2(vec2(cos(a2),sin(a2)),vec2(-sin(a2),cos(a2)));
	dir.xz*=rot1;
	dir.xy*=rot2;
	vec3 from=vec3(1.,.5,0.5);
	from+=vec3(time*2.,time,-2.);
	from.xz*=rot1;
	from.xy*=rot2;
	
	//volumetric rendering
	float s=0.1,fade=1.;
	vec3 v=vec3(0.);
	for (int r=0; r<volsteps; r++) {
		vec3 p=from+s*dir*.5;
		p = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold
		float pa,a=pa=0.;
		for (int i=0; i<iterations; i++) { 
			p=abs(p)/dot(p,p)-formuparam; // the magic formula
			a+=abs(length(p)-pa); // absolute sum of average change
			pa=length(p);
		}
		float dm=max(0.,darkmatter-a*a*.001); //dark matter
		a*=a*a; // add contrast
		if (r>6) fade*=1.-dm; // dark matter, don't render near
		//v+=vec3(dm,dm*.5,0.);
		v+=fade;
	
		v+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance
		fade*=distfading; // distance fading
		s+=stepsize;
	}
	v=mix(vec3(length(v)),v,saturation); //color adjust
	COLOR = vec4(v*.01,1.);
	
}"

[sub_resource type="ShaderMaterial" id=2]

shader = SubResource( 1 )

[node name="BossTest" type="Node2D"]
script = ExtResource( 1 )

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]

[node name="ParallaxLayer" type="ParallaxLayer" parent="ParallaxBackground"]
motion_scale = Vector2( 0, 0 )

[node name="Stars" type="Sprite" parent="ParallaxBackground/ParallaxLayer"]
material = SubResource( 2 )
texture = ExtResource( 2 )

[node name="DebugDoor" parent="." instance=ExtResource( 3 )]
position = Vector2( 192, 48 )

[node name="Lance" parent="." instance=ExtResource( 4 )]
position = Vector2( 200, 71 )

[node name="Bubble" type="Sprite" parent="Lance"]
modulate = Color( 1, 1, 1, 0.215686 )
texture = ExtResource( 5 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="ui_doodle" type="Sprite" parent="CanvasLayer"]
position = Vector2( 200, 112 )
texture = ExtResource( 6 )

